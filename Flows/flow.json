[{"id":"30da02dc.a2fd56","type":"tab","label":"ConfigurazioneInterfacce","disabled":false,"info":"Questo flusso consente di configurare le interfacce\ndi rete a partire da un file di testo avente la \nseguente struttura:\n\n## enp0s8;\n## configurazionev6=false;\n## dhcp4=true;\n## dhcp6=true;\n## indirizzi=192.168.1.2/24,2001:bc8::1/64;\n## gateway=192.168.1.1,2001:bc8::2;\n## dns=8.8.8.8,8.8.4.4;\n\n * Il primo campo specifica il nome dell'interfaccia.\n * IL secondo campo specifica se si vuole o meno una configurazione basata su IPV6.\n * Il terzo campo specifica se si vuol fare o meno uso di un server dhcp.\n * Il quarto campo specifica gli indirizzi ipv4 e ipv6 dell'interfaccia.\n * Il quinto campo specifica il gateway.\n * Il quinto campo specifica la lista dei server DNS."},{"id":"bb946305.da6da","type":"file in","z":"30da02dc.a2fd56","name":"","filename":"/home/francesco/Desktop/TesiLaurea/ConfigurationFiles/new_configuration.txt","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":620,"y":280,"wires":[["5f02c3ac.a5ffcc"]]},{"id":"c23a066e.35f788","type":"inject","z":"30da02dc.a2fd56","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":80,"y":300,"wires":[["24a8b9f3.53f44e"]]},{"id":"343d651e.8ce0d2","type":"python3-function","z":"30da02dc.a2fd56","name":"IPAddress","func":"configurazione6 = msg['payload'][0]['config_6']\ndynamic4 = msg['payload'][0]['dhcp4']\ndynamic6 = msg['payload'][0]['dhcp6']\nip = msg['payload'][0]['IP_addresses']\n\nf = open(\"/etc/netplan/50-cloud-init.yaml\",\"a+\")\n\nif dynamic4!=\"true\" or (configurazione6==\"true\" and dynamic6!=\"true\"):\n    f.write(\"            \"+\"addresses: \"+\"\\n\")\n    \nif dynamic4!=\"true\":\n    ipv4 = ip.split(\",\")[0]\n    f.write(\"            - \"+ipv4+\"\\n\")    \n\nif configurazione6==\"true\":\n    if dynamic6!=\"true\":\n        if len(ip.split(\",\"))>1:\n            ipv6 = ip.split(\",\")[1]\n            f.write(\"            - \"+ipv6+\"\\n\")\n    f.write(\"            \"+\"dhcp6: \"+dynamic6+\"\\n\") \n\n\n    \nf.write(\"            \"+\"dhcp4: \"+dynamic4+\"\\n\")    \n\nf.close()\nreturn msg","outputs":1,"x":1370,"y":100,"wires":[["d0f17cef.26881"]]},{"id":"d0f17cef.26881","type":"python3-function","z":"30da02dc.a2fd56","name":"DefGateway","func":"configurazione6 = msg['payload'][0]['config_6']\ndynamic4 = msg['payload'][0]['dhcp4']\ndynamic6 = msg['payload'][0]['dhcp6']\ngateway = msg['payload'][0]['gateway']\n\nf = open(\"/etc/netplan/50-cloud-init.yaml\",\"a+\")\n\nif dynamic4!='true':\n    gateway4 = gateway.split(\",\")[0]\n    f.write(\"            \"+\"gateway4: \")\n    f.write(gateway4+\"\\n\")\n\nf.close()\n\nreturn msg","outputs":1,"x":1590,"y":100,"wires":[["2c844c17.1b9694"]]},{"id":"2c844c17.1b9694","type":"python3-function","z":"30da02dc.a2fd56","name":"DNS","func":"configurazione6 = msg['payload'][0]['config_6']\ndynamic4 = msg['payload'][0]['dhcp4']\ndynamic6 = msg['payload'][0]['dhcp6']\nDNS = msg['payload'][0]['DNS_list']\n\nif dynamic4!='true' or (dynamic6!='true' and configurazione6==\"true\"):\n    dnsList = DNS.split(\",\")\n    f = open(\"/etc/netplan/50-cloud-init.yaml\",\"a+\")\n    f.write(\"            \"+\"nameservers:\"+\"\\n\")\n    f.write(\"                 addresses: \")\n    f.write(\"\\n\")\n    \n    for dnsServer in dnsList:\n        f.write(\"                 - \"+dnsServer+\"\\n\")\n    \n    f.close()\n\nreturn msg","outputs":1,"x":1830,"y":100,"wires":[["768e5d3f.797514"]]},{"id":"5439cc3e.5e245c","type":"python3-function","z":"30da02dc.a2fd56","name":"StringSplitter","func":"import re\n\nmsg['payload'] = msg['payload'].replace(\" \",\"\")\nmsg['payload'] = msg['payload']\nmsg['payload'] = re.sub(r'(?m)^ *#.*\\n?','',msg['payload'])\nmsg['payload'] = re.sub(r'(?m)^ *\\n?','',msg['payload'])\n\nintList = msg['payload'].split('$')\ndataArray = []\n\ncount_interface = 1\n\nfor i in intList:\n    dataInterface = i.split(';')\n    \n    for j in range(0,len(dataInterface)):\n        dataInterface[j] = dataInterface[j].replace('\\n','')\n    \n    if count_interface!=len(intList):\n        interfaceDictionary = {\n            \"interface_name\": dataInterface[0].split(\"=\")[1],\n            \"config_6\": dataInterface[1].split(\"=\")[1],\n            \"dhcp4\": dataInterface[2].split(\"=\")[1],\n            \"dhcp6\": dataInterface[3].split(\"=\")[1],\n            \"IP_addresses\": dataInterface[4].split(\"=\")[1],\n            \"gateway\": dataInterface[5].split(\"=\")[1],\n            \"DNS_list\": dataInterface[6].split(\"=\")[1],\n        }\n        \n        dataArray.append(interfaceDictionary)\n    count_interface+=1\n\n\nmsg['payload'] = dataArray\n\nnode.warn(msg['payload'])\n\nreturn msg","outputs":1,"x":910,"y":100,"wires":[["1a0207d1.6052f"]],"info":"Questo nodo si occupa di dividere i vari parametri \ncontenuti all'interno del file di configurazione\ngenerato dall'utente."},{"id":"1a0207d1.6052f","type":"python3-function","z":"30da02dc.a2fd56","name":"InterfaceName","func":"intName = msg['payload'][0]['interface_name']\n\nf = open(\"/etc/netplan/50-cloud-init.yaml\",\"a+\")\nf.write(\"        \"+intName+\":\\n\")\nf.close()\n\nreturn msg","outputs":1,"x":1140,"y":100,"wires":[["343d651e.8ce0d2"]]},{"id":"5f02c3ac.a5ffcc","type":"python3-function","z":"30da02dc.a2fd56","name":"YAML_Configurator","func":"\nf = open(\"/etc/netplan/50-cloud-init.yaml\",\"w+\")\nf.write(\"network:\\n\")\nf.write(\"    ethernets:\\n\")\nf.close()\n\n\nreturn msg","outputs":1,"x":700,"y":100,"wires":[["5439cc3e.5e245c"]]},{"id":"768e5d3f.797514","type":"python3-function","z":"30da02dc.a2fd56","name":"NextInterface","func":"lastIndex= len(msg['payload'])\n\nmsg['payload'] = msg['payload'][1:lastIndex]\n\nreturn msg","outputs":1,"x":1280,"y":460,"wires":[["148e97cd.14c6b8"]]},{"id":"148e97cd.14c6b8","type":"switch","z":"30da02dc.a2fd56","name":"","property":"payload","propertyType":"msg","rules":[{"t":"empty"},{"t":"nempty"}],"checkall":"true","repair":false,"outputs":2,"x":1450,"y":460,"wires":[["672fac2c.1c3a44"],["1a0207d1.6052f"]]},{"id":"672fac2c.1c3a44","type":"python3-function","z":"30da02dc.a2fd56","name":"YAML_Terminator","func":"f = open(\"/etc/netplan/50-cloud-init.yaml\",\"a+\")\nf.write(\"    \"+\"version: 2\")\nf.close()\n\nreturn msg","outputs":1,"x":1750,"y":440,"wires":[["dcb0874c.0baad8"]]},{"id":"dcb0874c.0baad8","type":"exec","z":"30da02dc.a2fd56","command":"sudo netplan apply","addpay":true,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":2070,"y":440,"wires":[[],[],[]]},{"id":"24a8b9f3.53f44e","type":"exec","z":"30da02dc.a2fd56","command":"/home/francesco/Desktop/TesiLaurea/sanitizer.sh","addpay":false,"append":"","useSpawn":"false","timer":"","oldrc":false,"name":"","x":280,"y":480,"wires":[["bb946305.da6da"],[],[]]}]